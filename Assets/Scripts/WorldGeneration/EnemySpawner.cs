using UnityEngine;
using System.Collections.Generic;

public class EnemySpawner : MonoBehaviour
{
    [Header("Poisson Disk Settings")]
    [Tooltip("Minimum spacing between enemies (used as the radius for point generation)")]
    public float minSpacing = 30f;
    [Tooltip("The overall region where enemies can spawn")]
    public Vector2 regionSize = new Vector2(30, 30);
    [Tooltip("Number of attempts to find a valid position before rejection")]
    public int rejectionSamples = 30;

    [Header("Enemy Settings")]
    [Tooltip("Assign the enemy prefab here")]
    public GameObject enemyPrefab;

    // List of positions generated by the Poisson Disc Sampling script
    private List<Vector2> spawnPoints;

    void Start()
    {
        SpawnEnemies();
    }

    void SpawnEnemies()
    {
        // Generate spawn positions using your existing PoissonDiscSampling script.
        // This method returns a List<Vector2> for positions.
        spawnPoints = PoissonDiscSampling.GeneratePoints(minSpacing, regionSize, rejectionSamples);

        // For each position, spawn an enemy
        foreach (Vector2 pos in spawnPoints)
        {
            SpawnEnemy(pos);
        }
    }

    void SpawnEnemy(Vector2 pos)
    {
        if (enemyPrefab == null)
        {
            Debug.LogError("Enemy Prefab is not assigned!");
            return;
        }

        // Instantiate the enemy prefab at the specified position with no rotation
        GameObject enemy = Instantiate(enemyPrefab, pos, Quaternion.identity);

        /* If we want to change how big enemies are
        float randomScale = Random.Range(1f, 3f);
        enemy.transform.localScale = Vector3.one * randomScale;*/

        float Scale = 0.5f;
        enemy.transform.localScale = Vector3.one * Scale;

    }

    private void OnDrawGizmos()
    {
        // Draw the overall spawn region in red
        Gizmos.color = Color.red;
        Gizmos.DrawWireCube(regionSize / 2, regionSize);

        // If we have spawn points generated (visible in play mode), draw them as small cyan spheres
        if (spawnPoints != null)
        {
            Gizmos.color = Color.cyan;
            foreach (Vector2 pos in spawnPoints)
            {
                Gizmos.DrawSphere(pos, 0.2f);
            }
        }
    }
}